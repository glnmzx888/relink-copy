README:
June 2011

This file describes the ReLink tool we developed for recovering missing links between bugs and changes. The tool could help software maintenance studies, such as software defect prediction.

The tool is developed in Java. The release package contains one jar file named "ReLink.jar", a bug-reference pattern file named "pattern.txt", a WordNet configuration file named "file_properties.xml", a WordNet dictionary named "dictionary" and a "data" directory that contains experimental data.

- Input File Formats - 
The tool takes the following files as inputs:
. Name of bug-data file. Bug-data file provides the basic bug information. The format of the file is: bugID, Type Status, Owner, Reporter, ReportDate, ModifiedDate, LastDate, Summary, Comments 
. Name of bug-comment file. Bug-comment file provides the comments from the developers and the users. The format of the file is: bugID, developer, date, comments 
. Name of change-log file. Change-log file provides the basic change log information. The format of the file is: revisionNo, date, Author, Message 
. Name of output directory. The output directory is used to store the final results. 
. Name of golden-set file (Optional). The golden-set file is used to evaluate the final results. If you don't specify the golden set file, the tool won't evaluate the results. 
. Name of index file (Optional). The index file is the file which stores the index of bug reports and change logs, which is generated by previous experiment. Since the process of indexing could be time-consuming, the index file can be saved for next usage. 

- How to Run it - 
Java 1.5 is required to run the tool. The command is as follows:
    $ java -jar ReLink.jar bugDataFile bugCommentDataFile changeLogFile outputDirectory (-g goldenSetFile) (-i indexFile)

Two examples are as follows:
    $ java -jar ReLink.jar zxing/bugData.txt zxing/bugCommentData.txt zxing/changeLogs.txt zxing -g zxing/links.txt

    $ java -jar ReLink.jar zxing/bugData.txt zxing/bugCommentData.txt zxing/changeLogs.txt zxing -g zxing/links.txt -i zxing/directory_result/wv.txt

The first command example asks the tool to process the zxing dataset and create the index for the project.
The second command example asks the tool to process the zxing dataset using the existing index.
We also provide exemplar batch files for these commands.

Note: For large datasets, it may take long time (even hours) for the tool to perform indexing, so please be patient.

- Output File -
The output file is named "final_results.txt", which contains the information about linked bugs and changes. The format of the output file is: bugID, reporter, owner, status, reportDate, modifiedDate, Type, bugSummary,recommendRevisionNo, recommendRevisionAuthor, recommendRevisionLog, isTrueLink. 

- Test Projects - 
With this distribution, we provide four projects for evaluation, ZXing, OpenIntents, Apache and Eclipse MAT. We provide the raw data, as well as the golden sets of links that have been manually checked. If you want to run the tool using other projects, please refer to the format of the input files.

The data directory contains the following files:
. bugData.txt: this is the bug data, which contains information about BugID,Type,Status,Owner,Reporter,ReportDate,LastModifiedDate and Summary.
. bugCommentData.txt: this is the bug comments data, which contains information about BugID,Developer,Date and Comments.
. changeLogs.txt: this is the change log data, which contains information about RevisionNO,Date,Author and Message.
. golden_links.txt: this is the golden links data, which is manually annotated and verified. The data contains information about the bug_id and revision_no.
. Golden.arff: this is the defect prediction dataset constructed by the golden set links.
. ReLink.arff: this is the defect prediction dataset constructed by the links found by ReLink.
. TraditionHeuristics.arff: this is the defect prediction dataset constructed by the links found by traditional heuristics. 
. Simulation (for Eclipse MAT): this directory contains the result of our simulation experiments. We conducted the experiment 10 times, so there are 10 sub-directories for each experiment.


If you have any comments/questions regarding the tool, please feel free to contact any of the project members.


- End - 

