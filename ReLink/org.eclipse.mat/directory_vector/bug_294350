stackoverflowerror in arrayutils.hybridsort. null for one particular dump i saw a stack overflow error.  java.lang.stackoverflowerror     at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:  ...     at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.hybridsort(arrayutils.java:      at org.eclipse.mat.collect.arrayutils.sort(arrayutils.java:      at org.eclipse.mat.parser.index.indexwriter$inboundwriter.processsegment(indexwriter.java:      at org.eclipse.mat.parser.index.indexwriter$inboundwriter.flush(indexwriter.java:      at org.eclipse.mat.parser.internal.garbagecleaner.clean(garbagecleaner.java:      at org.eclipse.mat.parser.internal.snapshotfactoryimpl.parse(snapshotfactoryimpl.java:      at org.eclipse.mat.parser.internal.snapshotfactoryimpl.opensnapshot(snapshotfactoryimpl.java:      at org.eclipse.mat.snapshot.snapshotfactory.opensnapshot(snapshotfactory.java:      at org.eclipse.mat.internal.apps.parsesnapshotapp.parse(parsesnapshotapp.java:      at org.eclipse.mat.internal.apps.parsesnapshotapp.start(parsesnapshotapp.java:      at org.eclipse.equinox.internal.app.eclipseapphandle.run(eclipseapphandle.java:      at org.eclipse.core.runtime.internal.adaptor.eclipseapplauncher.runapplication(eclipseapplauncher.java:      at org.eclipse.core.runtime.internal.adaptor.eclipseapplauncher.start(eclipseapplauncher.java:      at org.eclipse.core.runtime.adaptor.eclipsestarter.run(eclipsestarter.java:      at org.eclipse.core.runtime.adaptor.eclipsestarter.run(eclipsestarter.java:      at sun.reflect.nativemethodaccessorimpl.invoke0(native method)     at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:      at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:      at java.lang.reflect.method.invoke(method.java:      at org.eclipse.equinox.launcher.main.invokeframework(main.java:      at org.eclipse.equinox.launcher.main.basicrun(main.java:      at org.eclipse.equinox.launcher.main.run(main.java:      at org.eclipse.equinox.launcher.main.main(main.java:   the bug is reproducable with this particular dump.  found 28,660,490 identifiers, 28,637,372 objects, 23,118 classes  i put some println statements into the quicksort method and got data such as this:  median - shows indexes and values split - shows comparison, left, right indexes &amp; values split - shows start and end of comparison equal range and size  the array is not partitioning nicely. i don't know why we are so unlucky.    median 0:2 29792348:3 14896174:886 split 29792348:3 left:0 right:29792348 size:29792349 split 46440 73546 27106 median 73547:4718 29792348:4717 14932947:3392 split 29792348:4717 left:73547 right:29792348 size:29718802 split 27573948 27573969 21 median 73547:4715 27573947:4691 13823747:3394 split 27573947:4691 left:73547 right:27573947 size:27500401 split 27573829 27573837 8 median 73547:4688 27573828:4670 13823687:3394 split 27573828:4670 left:73547 right:27573828 size:27500282 split 27546093 27546137 44 median 73547:2225 27546092:2066 13809819:143 split 27546092:2066 left:73547 right:27546092 size:27472546 split 17713344 17713357 13 median 73547:1947 17713343:886 8893445:103 split 17713343:886 left:73547 right:17713343 size:17639797 split 12541192 17426557 4885365 median 73547:653 12541191:649 6307369:241 split 12541191:649 left:73547 right:12541191 size:12467645 split 12508269 12508272 3 median 73547:638 12508268:402 6290907:241 split 12508268:402 left:73547 right:12508268 size:12434722 split 12477686 12478971 1285 median 73547:241 12477685:118 6275616:241 split 73547:241 left:73547 right:12477685 size:12404139 split 7449515 12403993 4954478 median 73547:118 7449514:107 3761530:143 split 73547:118 left:73547 right:7449514 size:7375968 split 1955308 2040906 85598 median 2040907:143 7449514:143 4745210:143 split 2040907:143 left:2040907 right:7449514 size:5408608 split 2379169 7417115 5037946 median 17713358:3394 27546092:2225 22629725:3392 split 22629725:3392 left:17713358 right:27546092 size:9832735 split 17758804 22638692 4879888 median 0:16561368 10217941:17002946 5108970:16996934 split 5108970:16996934 left:0 right:10217941 size:10217942 split 5331943 10211829 4879886 median 0:16996932 5331942:16996927 2665971:16633105 split 5331942:16996927 left:0 right:5331942 size:5331943 split 5331936 5331936 0 median 0:16996922 5331935:16996917 2665967:16994378 split 5331935:16996917 left:0 right:5331935 size:5331936 split 5331926 5331926 0 median 0:16996912 5331925:16996907 2665962:16994378 split 5331925:16996907 left:0 right:5331925 size:5331926 split 5331916 5331916 0 median 0:16996902 5331915:16996897 2665957:16994378 split 5331915:16996897 left:0 right:5331915 size:5331916 split 5331906 5331906 0 median 0:16996892 5331905:16996887 2665952:16994378 split 5331905:16996887 left:0 right:5331905 size:5331906 split 5331896 5331896 0 median 0:16996863 5331895:16996858 2665947:16994378 split 5331895:16996858 left:0 right:5331895 size:5331896 split 5331859 5331859 0 median 0:16996839 5331858:16996834 2665929:16633058 split 5331858:16996834 left:0 right:5331858 size:5331859 split 5331835 5331835 0 median 0:16996829 5331834:16996824 2665917:16633046 split 5331834:16996824 left:0 right:5331834 size:5331835 split 5331825 5331825 0 median 0:16996819 5331824:16996814 2665912:16633041 split 5331824:16996814 left:0 right:5331824 size:5331825 split 5331815 5331815 0 median 0:16996809 5331814:16996804 2665907:16633074 split 5331814:16996804 left:0 right:5331814 size:5331815 split 5331805 5331805 0 median 0:16996799 5331804:16996794 2665902:16578372 split 5331804:16996794 left:0 right:5331804 size:5331805 split 5331795 5331795 0 median 0:16996789 5331794:16996784 2665897:16633031 split 5331794:16996784 left:0 right:5331794 size:5331795 split 5331785 5331785 0 median 0:16996779 5331784:16996774 2665892:16633026 split 5331784:16996774 left:0 right:5331784 size:5331785 split 5331775 5331775 0 median 0:16996769 5331774:16996764 2665887:16633021 split 5331774:16996764 left:0 right:5331774 size:5331775 split 5331765 5331765 0 median 0:16996759 5331764:16996754 2665882:16633016 split 5331764:16996754 left:0 right:5331764 size:5331765 split 5331755 5331755 0 median 0:16996749 5331754:16996744 2665877:16633011 split 5331754:16996744 left:0 right:5331754 size:5331755 split 5331745 5331745 0 median 0:16996739 5331744:16996734 2665872:16633006 split 5331744:16996734 left:0 right:5331744 size:5331745 split 5331735 5331735 0 median 0:16996729 5331734:16996724 2665867:16633001 split 5331734:16996724 left:0 right:5331734 size:5331735 split 5331725 5331725 0 median 0:16996719 5331724:16996714 2665862:16632996 split 5331724:16996714 left:0 right:5331724 size:5331725 split 5331715 5331715 0 median 0:16996709 5331714:16996704 2665857:16632991 split 5331714:16996704 left:0 right:5331714 size:5331715 split 5331705 5331705 0 median 0:16996699 5331704:16996694 2665852:16632986 split 5331704:16996694 left:0 right:5331704 size:5331705 split 5331695 5331695 0 median 0:16996689 5331694:16996684 2665847:16632981 split 5331694:16996684 left:0 right:5331694 size:5331695 split 5331685 5331685 0 median 0:16996674 5331684:16996640 2665842:16632976 split 5331684:16996640 left:0 right:5331684 size:5331685 split 5331626 5331626 0 median 0:16996635 5331625:16996630 2665812:16994378 split 5331625:16996630 left:0 right:5331625 size:5331626 split 5331616 5331616 0 median 0:16996625 5331615:16996620 2665807:16994378 split 5331615:16996620 left:0 right:5331615 size:5331616 split 5331606 5331606 0 i've solved the problem by recursing on the smaller part first, then looping instead of recursing for the bigger part.  this could give order n-squared performance (though it actually runs okay with this dump) if really unlucky, but won't cause stack overflow.  we need a simple test case though. an example of a bad sequence is 8 6 4 2 1 3 5 7 9  median of left, right, middle 8,9,1 =&gt; 8  partition 6 4 2 1 3 5 7 8 9  sort element 0..6  media of left, right middle 6, 1, 7 =&gt; 6  partition 4 2 1 3 5 6 7 8 9  etc. fix and test case sorttest.java checked in.  sorttest isn't in the full test suite as i'm not sure if it will use too much heap. the radix sort routine now can cope with negative numbers, so the sort routine is safe for all numbers. (stack overflow error ) (array utils ) (stack overflow error ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (array utils ) (index writer ) (inbound writer ) (index writer ) (index writer ) (inbound writer ) (index writer ) (garbage cleaner ) (garbage cleaner ) (snapshot factory impl ) (snapshot factory impl ) (snapshot factory impl ) (snapshot factory impl ) (snapshot factory ) (snapshot factory ) (parse snapshot app ) (parse snapshot app ) (parse snapshot app ) (parse snapshot app ) (eclipse app handle ) (eclipse app handle ) (eclipse app launcher ) (eclipse app launcher ) (eclipse app launcher ) (eclipse app launcher ) (eclipse starter ) (eclipse starter ) (eclipse starter ) (eclipse starter ) (native method accessor impl ) (native method accessor impl ) (native method accessor impl ) (delegating method accessor impl ) (delegating method accessor impl ) (sort test ) (sort test ) ( invoke ) ( 0 ) 294350 294350 294350 294350