the unreachable_objects view is broken. null steps done:  open the sample heap dump from the help. click on &quot;unreachable objects histogram&quot; link at the top of the overview page.  the view shows up but right clicking only opens a menu with one entry &quot;edit filter&quot;. forget to mention. used eclipse  and then installed mat using the update site unfortunately it is not possible to proceed analysis with unreachable objects histogram - there is no object graph benind it(see <a href="http://wiki.eclipse.org/memoryanalyzer/faq#how_to_analyse_unreachable_objects">http://wiki.eclipse.org/memoryanalyzer/faq#how_to_analyse_unreachable_objects</a>) you can use a flag to keep those objects while parsing, they will appear then in normal class histogram, but currently there is no query to extract the unreachable objects from a histogram. (in reply to <a href="show_bug.cgi?id=281622#c2">comment #2</a>) <span class="quote">&gt; unfortunately it is not possible to proceed analysis with unreachable objects &gt; histogram - there is no object graph benind it(see &gt; <a href="http://wiki.eclipse.org/memoryanalyzer/faq#how_to_analyse_unreachable_objects">http://wiki.eclipse.org/memoryanalyzer/faq#how_to_analyse_unreachable_objects</a>) &gt; you can use a flag to keep those objects while parsing, they will appear then &gt; in normal class histogram, but currently there is no query to extract the &gt; unreachable objects from a histogram. &gt; </span >  ok, i understand.  but then i think it's at least a usability problem. it looks like a normal histogramm and i would at least expect that i can inspect single instances.  having a different icon or some other indicator that this is only a class statistics, like the one that you also can get from the jvm without a heap dump, would make sense to me.  the icon for the unreachable objects histogram page is actually the 'execute query' icon of a disk with a dot, not a histogram icon.  the classes have the normal class icon.  it might be nice if the selecting a class in the unreachable objects view actually brought up the class in the inspector (assuming it hadn't itself been thrown away). that's an enhancement though. another enhancement would be for the -keep_unreachable_objects to mark the objects with a new gc type - e.g. 'unreachable'.  you could then parse the dump with -keep_unreachable_objects, do show gc roots, select 'unreachable' then do show retained set.  ideally there would be a way of specifying options such as -keep_unreachable_objects from the gui.  i propose that this bug is converted into an enhancement. i think it would make sense to include such changes in . what do you think? we could save the class address in the histogram record, then using the snapshot convert that to an object id if the class still exists in the dump.  this means the object inspector will show the class if it still exists in the dump.  presumably we should return null from getcontext for a class that does not exist. the context menu will then just say 'edit filter'.  if the class exists, should we return an icontextobject (for just the class, selecting a query operates on the class object), or a icontextobjectset with no objects, so selecting the class and a query produces no results?  old histograms will get 0 for the class address when deserialized, but that won't be an unreachable object as 0 is only used for the bootstrap loader. i've made the change so that keep_unreachable_objects marks objects as 'unreachable'.  i wonder if this is the right term.  phd files have no root information. the dtfj parser marks objects without inbound references as gcrootinfo.type.unknown.  markunreachbleasgcunknown() marks objects without inbound references and enough of the remaining unreachable objects as gcrootinfo.type.unreachable to make all objects reachable.  should phd files always use the markunreachbleasgcunknown() method as there is no knowledge of roots? if so, is the term 'unreachable' correct as a root type name? perhaps the way forward for phd files is for the dtfj parser to indicate to the garbagecleaner that all objects need to be made reachable.  one way would be to use the properties from the getsnapshotinfo. e.g. in the parser do:              index.getsnapshotinfo().setproperty(&quot;keep_unreachable_objects&quot;, gcrootinfo.type.unknown); //$non-nls-1$   and retrieve the value in garbagecleaner. this will be serialized with the snapshot, which at least keeps a record of what has been done.  the -keep_unreachable_objects command line option could then set              idx.getsnapshotinfo().setproperty(&quot;keep_unreachable_objects&quot;, gcrootinfo.type.unreachable); //$non-nls-1$   perhaps this should be done before calling the parser so the parser knows what is happening, and can override the value if required. there's no way of clearing a property, so perhaps 0 or null should be defined to mean 'not set'.  we could do with a list of command line options and snapshot properties.  $heapformat org.eclipse.mat.snapshot.unreachableobjectshistogram  etc. i've put in the changes where keep_unreachable_objects is an integer property with the gcroottype used to mark the unreachable objects.  if you have a dump built with -keep_unreachable_objects in batch mode then the retained set from unreachable gcroots shows you a full histogram.  is this now good enough? (memory analyzer ) (memory analyzer ) (memory analyzer ) (memory analyzer ) (i context object ) (i context object set ) (gc root info ) (gc root info ) (garbage cleaner ) (gc root info ) (garbage cleaner ) (gc root info ) (unreachable objects histogram ) (gc root type ) (gc roots ) ( c ) ( 2 ) 281622 281622 281622 281622