some slow operations should cancel quicker. null some slow operations put up a progress bar, but to cancel it takes a while.  e.g.  waste in character arrays retained set - calculating retained size   perhaps some queries should just return a truncated result rather than giving up when canceled. +1  agree. we already changed some of the queries to do this (return partial results), for example group by value, empty collections, etc...  we should go through all the queries and decide for which of them it makes sense to return partial result, and for which not reduce the interval to 256 or 100 or less. i have one concern only - we should double-check the impact on performance. in the past we had some queries taking terribly long just because of too frequent updates of the progress listener /millions of updates/. i think it was relatively cheap to check if the cancel was hit, but reporting work was  expansive (when done millions of times). i think we should * modify the queries in question to check more frequently if the work is cancelled * report work on the monitor rarely * do some quick checks on the performance impact when the queries are executed with millions of objects to process  shall we propose first a list of queries where: * cancellation should be checked more frequently * partial results should be returned ? i tested quickly your changes in the dominatortree. on a 12 million objects dump there was no visible delay. i ran several times with and without the changes, and sometimes even the changed version was faster :) so if there is a delay, it seems to be minimal and not visible when all other interactions with the systems are taken into account. i haven't tested with bigger heap dumps yet, but i think we can leave the changes as you did them. the equinox bundle explorer could do with more checks. i'll make the change. are there some further concrete changes expected here? if not i think we can close the bug. at the moment there are no concrete places known which should be fixed. i close the bug. (dominator tree ) 295603 295603 295603 295603