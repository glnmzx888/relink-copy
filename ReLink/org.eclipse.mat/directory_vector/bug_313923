copy-paste on a large set takes an extremely long time. null i had used oql to select some 5000 items in a view, and then wanted to do some analysis in a spreadsheet (finding out what items take up 50%, 90%, 99% of memory, etc).  to do so, i can copy and paste over to the spreadsheet.  the copy operation takes several minutes to complete, which seems long.  it might be reasonable if it was recursing down in to the object referred to be the selections, but that's not the case.  it would be great if this could be about as fast as, say, selecting and copying 5000 rows in a 3 column spreadsheet, which is basically all i'm doing! i had a look at the copy and played with copying large amount of data. i couldn't reproduce the slow operation, but i ran quickly into an outofmemoryerror (for copying ~ rows with a string value, heap size and retained size columns). i also got into similar problems with fewer rows. may be in your case it was slow because of high memory usage?  i would suggest the following:    you can use the &quot;export&quot; functionality and export your data to a csv file. this worked fine and quickly for me and the  rows. do not use export to txt as it reuses the copy methods and you'll probably run into the same problems    i'll have a look at the copy implementation and see if i can improve something there.  right now for example the copy will &quot;expand&quot; all columns automatically, meaning that if there is one very long string in the whole table it will fill spaces to all rows to keep the table-like formatting. this is ok and works fine for smaller pieces of data, however for large pieces of data it caused oom error. may be we should at least show up a warning and hint the user to use the &quot;export to ...&quot; for larger amounts of data.    we need a specific implementation for &quot;export to txt&quot; - when writing the data to a file we don't have to keep the whole buffer in memory.  thanks for giving us feedback! i hope the workaround with &quot;export to csv&quot; will help you continue your analysis smoother. i submitted some changes, so that the data is streamed into a file when &quot;export to txt&quot; is executed, instead of building a full copy in memory first.  there are still some todos: - i figured out that in the oql result long strings are not limited (e.g in the object reference tree the long strings are cut to something like 1000 characters, which is not true for the oql results). - there are a lot of empty spaces added to achieve some nice formatting and this is ok. however, at least in the case of a left-aligned last column there is no need to add the spaces at the end of the line (but this is currently done) i submitted some more changes - now there will be no trailing white spaces added if there is just one column.  while trying to improve the copy i found also another problem - the alignment for the columns is hardcoded - the first column is left justified, and all the rest right justified. this works fine with all &quot;standard&quot; views in mat, but if i use oql to select  the address of an object and its value (say for strings) then the strings are right justified. this however would need a bit more thinking and therefore i opened a separate message for it - <span class="bz_closed"><a href="show_bug.cgi?id=318559" title="resolved fixed - alignment of columns when doing copy/paste is hardcoded">bug 318559</a></span>.  some of the most frequently called method during the copy were using stringbuffers internally, although there is no synchronization needed. i changed them to stringbuilder and hope for a bit better performance.  with this we have: - &quot;export to txt&quot; doesn't copy all data into memory first - no outofmemoryerror - in case of just one column the copy will not add unnecessary blank spaces - stringbuilder used instead of stringbuffer to increase performance - a separate message for the alignment problem is opened  back to the initial reporter: unfortunately i wasn't able to reproduce the long-running copy and assumed the whole time it was slow because of high memory usage and possible high gc activity. in general the copy / paste was intended to use on smaller amount of data and the &quot;save to ...&quot; for exporting larger amounts of data.  i hope with this few changes the functionality improved and would close the message now. if you feel the fixes do not solve the problem in an acceptable way, please reopen the bug and give us your feedback. ps: the changes will be made available with our next service release, tentatively within the next month (out of memory error ) (tod os ) (string buffers ) (string builder ) (out of memory error ) (string builder ) (string buffer ) 313923 313923 313923 313923